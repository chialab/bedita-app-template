---
stages:
  - test
  - build
  - deploy

variables:
  AWS_DEFAULT_REGION: 'eu-south-1'
  AWS_WEB_IDENTITY_TOKEN_FILE: '.aws/web-identity-credentials'
  PHP_VERSION: '8.1'
  # ECR_REGISTRY: '000000000000.dkr.ecr.eu-west-1.amazonaws.com'
  # ECR_IMAGE: "${ECR_REGISTRY}/bedita-app"

###
# Setup
###
.composer:
  image: "chialab/php:${PHP_VERSION}"
  variables:
    COMPOSER_CACHE_DIR: "${CI_PROJECT_DIR}/.cache/composer"
  cache:
    key: "composer-${CI_COMMIT_REF_SLUG}"
    paths:
      - .cache/composer

.yarn:
  image: node:lts
  variables:
    YARN_CACHE_DIR: "${CI_PROJECT_DIR}/.cache/yarn"
  before_script:
    - test ! -f "${NPMRC}" || cp "${NPMRC}" "${HOME}/.npmrc"
    - yarn install --cache-dir $YARN_CACHE_DIR
  cache:
    key: "yarn-${CI_COMMIT_REF_SLUG}"
    paths:
      - .cache/yarn

dependencies:
  needs: []
  stage: test
  extends: .composer
  script:
    - composer install --no-dev --no-cache --prefer-dist
  artifacts:
    paths:
      - ./vendor
    expire_in: 1 day

###
# Tests
###
test:php:cs:
  needs: ['dependencies']
  stage: test
  only:
    - main
    - merge_requests
  extends: .composer
  before_script:
    - composer install --prefer-dist
  script:
    - composer run-script cs-check -- -n

test:php:stan:
  needs: ['dependencies']
  stage: test
  only:
    - main
    - merge_requests
  extends: .composer
  before_script:
    - composer install --prefer-dist
  script:
    - composer run-script stan

test:php:gettext:
  needs: ['dependencies']
  stage: test
  only:
    - main
    - merge_requests
  extends: .composer
  before_script:
    - apt-get update && apt-get install -y gettext
    - composer install --prefer-dist
  script:
    - composer run-script gettext -- --ci

test:js:lint:
  needs: ['dependencies']
  stage: test
  only:
    - main
    - merge_requests
  extends: .yarn
  script:
    -  yarn run lint:scripts

test:css:lint:
  needs: ['dependencies']
  stage: test
  only:
    - main
    - merge_requests
  extends: .yarn
  script:
    - yarn run lint:styles

###
# Build
###
build:assets: # build JS and CSS assets
  needs: []
  stage: build
  only:
    - main
    - merge_requests
  extends: .yarn
  script:
    - yarn build
  artifacts:
    paths:
      - ./plugins/*/webroot/build
      - ./webroot/build
    expire_in: 1 day

build:env:
  needs: []
  stage: build
  only:
    - main
    - merge_requests
  image: alpine:3
  interruptible: true
  variables:
    GIT_STRATEGY: none
  artifacts:
    reports:
      dotenv: .env
  script:
    - '([ -n "${CI_COMMIT_TAG}" ] && printf "IMAGE_TAG=%s" "${CI_COMMIT_TAG}" || ([ -n "${CI_MERGE_REQUEST_IID}" ] && printf "IMAGE_TAG=mr-%s.%s" "${CI_MERGE_REQUEST_IID}" "${CI_COMMIT_SHORT_SHA}" || printf "IMAGE_TAG=%s%s.%s" "$(test ${CI_COMMIT_REF_SLUG} = main && echo ''test-'' || echo ''dev-'')" "${CI_COMMIT_REF_SLUG}" "${CI_COMMIT_SHORT_SHA}")) > .env'

build:docker:
  needs:
    - job: 'build:env'
      artifacts: true
    - 'build:assets'
  stage: build
  parallel:
    matrix:
      - IMAGE: [app, web]
  image: ghcr.io/chialab/docker-buildx-ecr:1
  variables:
    DOCKER_HOST: 'tcp://docker:2375'
    PLATFORM: 'linux/amd64,linux/arm64'
  services:
    - name: docker:dind
      variables:
        DOCKER_TLS_CERTDIR: ''
  before_script:
    - 'echo "${CI_REGISTRY_PASSWORD}" | docker login -u "${CI_REGISTRY_USER}" --password-stdin "${CI_REGISTRY}"'
    - 'mkdir -p "$(dirname "${AWS_WEB_IDENTITY_TOKEN_FILE}")" && echo "${CI_JOB_JWT_V2}" > "${AWS_WEB_IDENTITY_TOKEN_FILE}"'
    - 'aws-ecr-get-login-password | docker login --username AWS --password-stdin "${ECR_REGISTRY}"'
    - 'docker run --privileged tonistiigi/binfmt --install all'
    - 'docker context create multi-arch'
    - 'docker --context multi-arch buildx create --use'
  script:
    - 'docker --context multi-arch buildx build --cache-to "type=registry,mode=max,ref=${CI_REGISTRY_IMAGE}/${IMAGE}:cache-${CI_COMMIT_REF_SLUG}" --cache-from "type=registry,ref=${CI_REGISTRY_IMAGE}/${IMAGE}:cache-${CI_COMMIT_REF_SLUG}" --platform "${PLATFORM}" --build-arg PHP_VERSION -t "${ECR_IMAGE}/${IMAGE}:${IMAGE_TAG}" --file "Dockerfile.${IMAGE}" --push .'

###
# Deploy
###
.deploy:
  needs:
    - job: 'build:env'
      artifacts: true
    - 'build:docker'
  stage: deploy
  image:
    name: amazon/aws-cli
    entrypoint:
      - /usr/bin/env
  before_script:
    - 'yum install -y gettext'
    - 'mkdir -p "$(dirname "${AWS_WEB_IDENTITY_TOKEN_FILE}")" && echo "${CI_JOB_JWT_V2}" > "${AWS_WEB_IDENTITY_TOKEN_FILE}"'
  script:
    - export TASK_DEFINITION_ARN="$(aws ecs register-task-definition --cli-input-json "$(envsubst < "deploy/${ENV_NAME}.json")" --output text --query "taskDefinition.taskDefinitionArn")"
    - 'printf "New task definition: %s\n" "${TASK_DEFINITION_ARN}"'

    - export MIGRATION_TASK_ARN="$(aws ecs run-task --cluster "${ECS_CLUSTER}" --task-definition "${TASK_DEFINITION_ARN}" --capacity-provider-strategy "$(aws ecs describe-services --cluster "${ECS_CLUSTER}" --services "${ECS_SERVICE}" --query 'services[0].capacityProviderStrategy')" --network-configuration "$(aws ecs describe-services --cluster "${ECS_CLUSTER}" --services "${ECS_SERVICE}" --query 'services[0].networkConfiguration')" --overrides '{"containerOverrides":[{"name":"app","command":["composer","run-script","migrate"]},{"name":"web","command":["tail","-f","/dev/null"]}]}' --query 'tasks[0].taskArn' --output text)"
    - 'printf "Migration task: %s\n" "${MIGRATION_TASK_ARN}"'
    - aws ecs wait tasks-stopped --cluster "${ECS_CLUSTER}" --task "${MIGRATION_TASK_ARN}"
    - |
      MIGRATION_EXIT_CODE="$(aws ecs describe-tasks --cluster "${ECS_CLUSTER}" --task "${MIGRATION_TASK_ARN}" --query 'tasks[0].containers[?name == `app`].exitCode' --output text)"
      if [ "${MIGRATION_EXIT_CODE}" != 0 ]; then exit "${MIGRATION_EXIT_CODE}"; fi

    - aws ecs update-service --cluster "${ECS_CLUSTER}" --service "${ECS_SERVICE}" --task-definition "${TASK_DEFINITION_ARN}" --force-new-deployment
    - aws ecs wait services-stable --cluster "${ECS_CLUSTER}" --services "${ECS_SERVICE}"
  environment:
    name: "${ENV_NAME}"
    url: "${ENV_URL}"

# deploy:test:
#   when: manual
#   extends: .deploy
#   variables:
#     ECS_CLUSTER: 'test'
#     ECS_SERVICE: 'test-bedita'
#     IAM_ROLE_ARN: 'arn:aws:iam::000000000000:role/test'
#     TASK_EXECUTION_IAM_ROLE_ARN: 'arn:aws:iam::000000000000:role/test'
#     CDN_DISTRIBUTION_ID: ''
#     DATABASE_URL_SECRET: 'arn:aws:ssm:eu-south-1:000000000000:parameter/ecs/000000000000/test/database-url'
#     SECURITY_SALT_SECRET: 'arn:aws:ssm:eu-south-1:000000000000:parameter/ecs/000000000000/test/security-salt'
#     ENV_NAME: 'test'
#     ENV_URL: 'https://test.app.bedita.cloud'

# deploy:production:
#   only:
#     - main
#   when: manual
#   extends: .deploy
#   variables:
#     ECS_CLUSTER: 'production'
#     ECS_SERVICE: 'prod-bedita'
#     IAM_ROLE_ARN: 'arn:aws:iam::000000000000:role/prod'
#     TASK_EXECUTION_IAM_ROLE_ARN: 'arn:aws:iam::000000000000:role/prod'
#     CDN_DISTRIBUTION_ID: ''
#     DATABASE_URL_SECRET: 'arn:aws:ssm:eu-south-1:000000000000:parameter/ecs/000000000000/prod/database-url'
#     SECURITY_SALT_SECRET: 'arn:aws:ssm:eu-south-1:000000000000:parameter/ecs/000000000000/prod/security-salt'
#     ENV_NAME: 'production'
#     ENV_URL: 'https://app.bedita.cloud'
